# -*- coding: utf-8 -*-
"""Murwanjani Tejo Riyono-Image Classification Model Deployment-Done.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sHH1Su5jQ5Va5HsEy2-jupa1iS0HOU3Q
"""

#Data Diri
print ('Nama         : Murwanjani Tejo Riyono')
print ('Kelas        : MLFE M1')
print ('Proyek Akhir : Image Classification Model Deployment')

#Import Library
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

#Confirm kaggle
from google.colab import files
files.upload()

#Install kaggle dan download dataset dari kaggle
!pip install -q kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d alessiocorrado99/animals10

#Import Library untuk zipfile,os dan shutil
import zipfile,os,shutil
local_zip = '/content/animals10.zip' #Variable local_zip berisi direktori lokasi file zip disimpan

#Proses ekstrak file zip
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/animals10')
zip_ref.close()

base_dir = '/content/animals10/raw-img' #Memasukkan isi /content/animals10/raw-img kedalam var base_dir

#Melihat jumlah folder dari file
len(os.listdir(base_dir))

#Melihat isi dari base_dir
os.listdir(base_dir)

#Rubah nama folder
!mv /content/animals10/raw-img/cane /content/animals10/raw-img/dog
!mv /content/animals10/raw-img/cavallo /content/animals10/raw-img/horse
!mv /content/animals10/raw-img/elefante /content/animals10/raw-img/elephant
!mv /content/animals10/raw-img/farfalla /content/animals10/raw-img/butterfly
!mv /content/animals10/raw-img/gallina /content/animals10/raw-img/chicken
!mv /content/animals10/raw-img/gatto /content/animals10/raw-img/cat
!mv /content/animals10/raw-img/mucca /content/animals10/raw-img/cow
!mv /content/animals10/raw-img/pecora /content/animals10/raw-img/sheep
!mv /content/animals10/raw-img/ragno /content/animals10/raw-img/spider
!mv /content/animals10/raw-img/scoiattolo /content/animals10/raw-img/squirrel

#Tampilkan isi yang baru
os.listdir(base_dir)

#Membuang folder yang tidak dibutuhkan
ignore_base_dir = ['cat', 'sheep', 'elephant', 'cow', 'squirrel', 'spider']

for x in ignore_base_dir:
  path = os.path.join(base_dir, x)
  shutil.rmtree(path)

contents=os.listdir(base_dir)
print(contents)

from PIL import Image
total = 0

for x in contents:
  dir = os.path.join(base_dir, x)
  y = len(os.listdir(dir))
  print(x+':', y)
  total = total + y
  
  img_name = os.listdir(dir)
  for z in range(4):
    img_path = os.path.join(dir, img_name[z])
    img = Image.open(img_path)
    print('-',img.size)
  print('---------------')

print('\nTotal Dataset Digunakan :', total)

#Proses pembuatan generator train dan val
datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    horizontal_flip=True,
    shear_range = 0.2,
    zoom_range=0.3,
    validation_split=0.2,
    fill_mode = 'nearest')

data_train = datagen.flow_from_directory(
    base_dir,
    target_size=(150, 150),
    batch_size=128,
    class_mode='categorical',
    subset='training')

data_val = datagen.flow_from_directory(
    base_dir, 
    target_size=(150, 150),
    batch_size=128,
    class_mode='categorical',
    subset='validation')

#Model

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5), 
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(4, activation='softmax')
])

model.compile(loss = 'categorical_crossentropy',
              optimizer = tf.optimizers.Adam(),
              metrics = ['accuracy'])

#Callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>=0.92 and logs.get('val_accuracy')>=0.92):
      print("\nAkurasi telah mencapai 92%!")
      self.model.stop_training = True

callbacks = myCallback()

#Proses Training
history = model.fit(data_train, 
                    epochs = 90, 
                    steps_per_epoch = data_train.samples // 128,
                    validation_data = data_val,
                    validation_steps = data_val.samples // 128,
                    verbose = 2,
                    callbacks = [callbacks])

#Plot loss
import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Pada Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['latih', 'val'], loc='upper left')
plt.show()

#Plot Akurasi
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy Pada Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['latih', 'val'], loc='upper left')
plt.show()

#Convert file ke TFLite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)