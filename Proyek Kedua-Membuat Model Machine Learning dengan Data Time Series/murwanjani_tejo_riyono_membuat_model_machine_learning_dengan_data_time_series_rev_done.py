# -*- coding: utf-8 -*-
"""Murwanjani_Tejo_Riyono_Membuat_Model_Machine_Learning_dengan_Data_Time_Series-Rev-Done.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CPUSj_CbgtkchphMopf5Zk8JQy1D_M7e
"""

print ('Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series')
print ('Nama  : Murwanjani Tejo Riyono')
print ('Kelas : MLFE M1')

import zipfile
local_zip = '/content/archive_48.zip' #Variable local_zip berisi direktori lokasi file zip disimpan

#Proses ekstrak file zip
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/archive_48')
zip_ref.close()

base_dir = '/content/archive_48/Summary of Weather.csv' #base_dir menampung nilai /content/archive_48/Summary

#Import library pandas dan numpy
import pandas as pd
import numpy as np

#Baca file csv
data = pd.read_csv(base_dir)

#Isi dataset
data.shape

data.info()

#Ceking nilai hilang pada dataset
data.isnull().sum()

#Tampil 10 data pertama
data.head(10)

#Convert object ke format waktu
data['Date']=pd.to_datetime(data['Date'])
data = data[['Date','MaxTemp' ]]
data.head(10)

data.info()

data1=data[['Date','MaxTemp']].copy()
data1.set_index('Date', inplace= True)
data1.head(10)

data1.info()

tanggal = data['Date'].values
maksimal = data['MaxTemp'].values

#Membagi data train dan data testing dan melihat banyaknya data setelah di split
from sklearn.model_selection import train_test_split

maksimal_latih, maksimal_test, tanggal_latih, tanggal_test = train_test_split(maksimal, 
                                                                              tanggal,
                                                                              test_size = 0.2, 
                                                                              random_state = 0, 
                                                                              shuffle=False)
print(len(maksimal_latih), len(maksimal_test))

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

#Membuat model
from keras.layers import Dense, LSTM

maksimal_latih = windowed_dataset(maksimal_latih, window_size=60, batch_size=100, shuffle_buffer=5000)
maksimal_test = windowed_dataset(maksimal_test, window_size=60, batch_size=100, shuffle_buffer=5000)


model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

#10% dari dataset
max = data['MaxTemp'].max()
min = data['MaxTemp'].min()
x = (max - min) * (10 / 100)
print(x)

#Kelas callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< x):
      print("\nMAE < 10% dari skala data!")
      self.model.stop_training = True
callbacks = myCallback()

#Melatih model 150x, otomatis berhenti jika mae < 10%
history = model.fit(maksimal_latih,
                    epochs=150, 
                    validation_data=(maksimal_test),
                    callbacks=[callbacks])

#Plot loss
import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Pada Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['latih', 'test'], loc='upper left')
plt.show()